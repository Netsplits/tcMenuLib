/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "unoSsd1306Ascii_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Uno1306Ascii", "c4858c2f-4134-4597-a7a0-b6719631a99b" };

SSD1306AsciiRenderer renderer(20, Arial14, System5x7);

// Global Menu Item declarations
ListRuntimeMenuItem menuListItem(11, 10, fnListItemRtCall, NULL);
const PROGMEM AnalogMenuInfo minfoStatusTemprature = { "Temprature", 9, 0xffff, 255, NO_CALLBACK, -40, 2, "C" };
AnalogMenuItem menuStatusTemprature(&minfoStatusTemprature, 0, NULL);
const PROGMEM FloatMenuInfo minfoStatusVoltageIn = { "Voltage In", 8, 0xffff, 0, NO_CALLBACK };
FloatMenuItem menuStatusVoltageIn(&minfoStatusVoltageIn, &menuStatusTemprature);
const PROGMEM FloatMenuInfo minfoStatusPowerUse = { "Power Use", 7, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuStatusPowerUse(&minfoStatusPowerUse, &menuStatusVoltageIn);
RENDERING_CALLBACK_NAME_INVOKE(fnStatusRtCall, backSubItemRenderFn, "Status", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoStatus = { "Status", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(fnStatusRtCall, &menuStatusPowerUse);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuListItem);
const PROGMEM AnyMenuInfo minfoPressMe = { "Press me", 10, 0xffff, 0, onActionPressed };
ActionMenuItem menuPressMe(&minfoPressMe, &menuStatus);
const PROGMEM BooleanMenuInfo minfoStandby = { "Standby", 5, 10, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuStandby(&minfoStandby, false, &menuPressMe);
const PROGMEM AnalogMenuInfo minfoBlue = { "Blue", 4, 8, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuBlue(&minfoBlue, 0, &menuStandby);
const PROGMEM AnalogMenuInfo minfoGreen = { "Green", 3, 6, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuGreen(&minfoGreen, 0, &menuBlue);
const PROGMEM AnalogMenuInfo minfoRed = { "Red", 2, 4, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuRed(&minfoRed, 0, &menuGreen);
const PROGMEM AnalogMenuInfo minfoBrightness = { "Brightness", 1, 2, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuBrightness(&minfoBrightness, 0, &menuRed);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).

    // Now add any readonly, non-remote and visible flags.
    menuStatusTemprature.setReadOnly(true);
    menuStatusVoltageIn.setReadOnly(true);
    menuStatusPowerUse.setReadOnly(true);

    // Code generated by plugins.
    renderer.setGraphicsDevice(&gfx);
    pinMode(A0, INPUT);
    switches.initialise(inputFromDfRobotShield(), false);
    menuMgr.initForUpDownOk(&renderer, &menuBrightness, DF_KEY_DOWN, DF_KEY_UP, DF_KEY_SELECT);
    menuMgr.setBackButton(DF_KEY_LEFT);
    menuMgr.setNextButton(DF_KEY_RIGHT);
}

